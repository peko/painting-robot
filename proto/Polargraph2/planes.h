#ifndef PLANES
#define PLANES
#define PLANES_LENGTH 158

float plane1[90]={-0.92944396,-1.48709,-0.80550403,1.92083,-1.79691801,0,-0.867473,-1.54906,-2.726342,4.5852,-7.9311894,1.73494,-1.611022,-3.09811,5.5146544,-7.31153,1.611026,-0.12392,1.796908,-2.04475,-0.062,-3.53184,-7.3735304,-0.12393,-7.373527,1.48709,-3.222045,-5.63855,18.0930234,-17.22547,0.371771,-5.14286,1.549067,-4.0895,0.185881,-6.3821,2.478501,-0.68159,0.805513,-14.87091,0.80550404,-3.5938,1.52800296,-1.98263,0.0409,69.14958,0.929432,-1.48709,0.805508,1.92083,1.796902,0,0.867469,-1.54906,2.726334,4.5852,7.9311536,1.73494,1.611015,-3.09811,-5.51463,-7.31153,-1.611015,-0.12392,-1.7969016,-2.04475,0.06196,-3.53184,7.3734936,-0.12393,7.373494,1.48709,3.222031,-5.63855,-18.0929436,-17.22547,-0.371772,-5.14286,-1.549054,-4.0895,-0.185886,-6.3821,-2.478486,-0.68159,-0.805507,-14.87091,-0.805508,-3.5938,-1.487091,-1.98279};
float plane2[58]={1.13916,-1.75256,7.886492,1.48967,0.08763,-3.32985,-7.535981,-6.39682,0,-3.94325,2.365947,-2.01543,0.262883,-6.74733,17.437911,4.1185,-0.350511,-5.25766,-16.824517,-20.242,-0.35051,-5.60817,-1.577299,-1.05154,-0.525766,-12.3555,-2.028971,-9.02649,-0.0057,72.11843,-1.139165,-1.75256,-7.886535,1.48967,-0.0876,-3.32985,7.536023,-6.39682,0,-3.94325,-2.36596,-2.01543,-0.262881,-6.74733,-17.437992,4.1185,0.350513,-5.25766,16.824588,-20.242,0.350511,-5.60817,1.577307,-1.05154,0.525772,-12.3555,2.015439,-9.02565};
float plane3[162]={1.98279,-1.85887,1.36316,-9.17039,28.50259,3.84165,-0.24785,-8.05508,-27.13942,-24.0413,1.23924,-31.84854,0.4957,-35.19449,1.73494,-1.61102,59.23581,33.58348,3.34595,-0.74355,40.15146,22.30637,0.12393,-13.75559,-16.23408,-12.64028,0.24785,-9.04647,-1.36317,-1.73494,-1.48709,1.36317,0,8.05507,-18.71256,-14.12736,0.49569,-2.10672,2.97419,-2.23063,0.12392,-16.48193,-2.10671,-1.73494,-4.46128,-0.12392,-1.73494,1.48709,0,14.87091,0.37178,2.85026,-26.64373,-20.69535,0,-2.35457,3.09811,-2.23064,0,-15.8623,-2.23064,-1.48709,-4.83304,0,-1.23925,1.48709,0,14.37521,0.37178,2.10672,-0.37178,1.23924,-30.36144,-23.79346,-0.37177,-34.2031,-2.23064,-6.32014,-4.10405,-4.0966,-0.0536,189.98301,-1.9828,-1.85887,-1.36317,-9.17039,-28.50271,3.84165,0.24785,-8.05508,27.13953,-24.0413,-1.23924,-31.84854,-0.49571,-35.19449,-1.73494,-1.61102,-59.23606,33.58348,-3.34597,-0.74355,-40.15164,22.30637,-0.12393,-13.75559,16.23416,-12.64028,-0.24786,-9.04647,1.36318,-1.73494,1.4871,1.36317,0,8.05507,18.71264,-14.12736,-0.4957,-2.10672,-2.97419,-2.23063,-0.12393,-16.48193,2.10672,-1.73494,4.4613,-0.12392,1.73494,1.48709,0,14.87091,-0.37177,2.85026,26.64383,-20.69535,0,-2.35457,-3.09811,-2.23064,0,-15.8623,2.23064,-1.48709,4.83307,0,1.23925,1.48709,0,14.37521,-0.37178,2.10671,0.37178,1.23925,30.36157,-23.79346,0.37178,-34.2031,2.23064,-6.32014,4.08953,-4.0895};
int plane_sizes[3] = {90,58,162};
float * planes[3] = {plane1, plane2, plane3};

void draw_plane(float scale, vector v) {
  float angle = atan2(v.y, v.x);
  char pid = random(3);
  int size=plane_sizes[pid];
  float * plane = planes[pid];
  for(int i=0; i<size; i+=2) {
  	float x = cos(angle+PI/2)*plane[i]-sin(angle+PI/2)*plane[i+1];
  	float y = sin(angle+PI/2)*plane[i]+cos(angle+PI/2)*plane[i+1];
    move({x*scale,y*scale});
  }
}


void triangle(vector v) {
    move({(v.y-v.x)/2.0, (-v.x-v.y)/2.0});
    move({-v.y, v.x});
    move({(v.y+v.x)/2.0, (-v.x+v.y)/2.0});
}

void perpendicular(vector v) {
   move({v.y/2.0, -v.x/2.0});
   move({-v.y, v.x});
   move({v.y/2.0, -v.x/2.0});
 
}

void trajectory() {
  
  float steps= 36.0;
  
  struct vector v = {R,0};
  
  float alpha = 10.0/180.0*PI;
  double cp = cos(alpha);
  double sp = sin(alpha);
  double cm = cos(-alpha);
  double sm = sin(-alpha);
  float minR = 2.0;
  float maxR = 5.0;
  while (1) { 
    
    float R=minR+random((maxR-minR)*100.0)/100.0;
    float c = random(18);
    
    for (int i = 0; i<c; i++) {
      norm(&v, R);
      v.x= v.x*cp-v.y*sp;
      v.y= v.x*sp+v.y*cp;
      move(v);
      if(!(i%4)) perpendicular(v);
      //triangle(v);     
    }
    
    c = random(36);
    R=minR+random((maxR-minR)*100.0)/100.0;
    
    for (int i = 0; i<c; i++) {
      norm(&v, R);
      v.x = v.x*cm-v.y*sm;
      v.y = v.x*sm+v.y*cm;
      move(v);
//      triangle(v);
      if(!(i%4)) perpendicular(v);
    }
    draw_plane(0.3, v);
  }
}
#endif 
